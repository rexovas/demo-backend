apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-deployment
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
    # helm.sh/chart: {{ include "demo-backend.chart" . }}
    helm.sh/chart: {{ include "{{ .Release.Name }}.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: api
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        iam.amazonaws.com/role: {{ .Values.data.IAM_ROLE }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          # envFrom:
          #   - configMapRef:
          #       name: "{{ .Release.Name }}"
          # env:
          #   - name: 
          #     valueFrom:
          #       secretKeyRef:
          #         name:
          #         key: SecretString
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /health
          #     port: {{ .Values.service.port }}
          #   initialDelaySeconds: 10
          # readinessProbe:
          #   httpGet:
          #     path: /health
          #     port: {{ .Values.service.port }}
          #   initialDelaySeconds: 10
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: "{{ .Release.Name }}"
#   labels:
#     id: {{ .Release.Name }}
#     kind: configMap
#     app.kubernetes.io/component: api
# data:
# {{ toYaml .Values.data.environment | indent 2 }}
#   {{- if and .Values.aws.secret_key .Values.aws.access_key_id }}
#   AWS_ACCESS_KEY_ID: "{{ .Values.aws.access_key_id }}"
#   AWS_SECRET_ACCESS_KEY: "{{ .Values.aws.secret_key }}"
#   AWS_DEFAULT_REGION: "{{ .Values.aws.region }}"
#   {{- end }}
# ---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{ .Release.Name }}-networkpolicy
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  policyTypes:
  - Ingress
  ingress:
  - from:
    # - namespaceSelector: {} # Allow access from ANY namespace
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector: {} # Allow ALL pods access to these pods (over exposed ports)
    ports:
    - protocol: TCP
      port: 3000 # This needs to match the 'containerPort' of the deployment
